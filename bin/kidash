#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2015-2019 Bitergia
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Alvaro del Castillo San Felix <acs@bitergia.com>
#

import argparse
import logging
import os
import sys

from requests import HTTPError

# Quick fix for avoiding weird warnings
# https://github.com/chaoss/grimoirelab-sirmordred/issues/192
import warnings
warnings.filterwarnings("ignore", message="numpy.dtype size changed")
warnings.filterwarnings("ignore", message="numpy.ufunc size changed")

from grimoire_elk.raw.elastic import ElasticOcean
from grimoire_elk.utils import config_logging
from kidash.kidash import import_dashboard, export_dashboard, list_dashboards

def get_params_parser_create_dash():
    """Parse command line arguments"""

    parser = argparse.ArgumentParser(usage="usage: kidash [options]",
                                     description="Import or Export a Kibana Dashboard")

    ElasticOcean.add_params(parser)

    parser.add_argument("--dashboard", help="Kibana dashboard id to export")
    parser.add_argument("--split-index-patterns", action='store_true',
                        help="Kibana index patterns are exported in different files")
    parser.add_argument("--export", dest="export_file", help="file with the dashboard exported")

    parser.add_argument("--import", dest="import_file", help="file with the dashboard/index pattern to be imported")
    parser.add_argument("--strict", action="store_true", help="check release date and only import newer panels")
    parser.add_argument("--kibana", dest="kibana_index", default=".kibana", help="Kibana index name (.kibana default)")
    parser.add_argument("--list", action='store_true', help="list available dashboards")
    parser.add_argument('-g', '--debug', dest='debug', action='store_true')
    parser.add_argument("--data-sources", nargs='+', dest="data_sources", help="Data sources to be included")
    parser.add_argument("--add-vis-studies", dest="add_vis_studies",
                        action='store_true', help="Include visualizations for studies")
    parser.add_argument("--kibana-url", dest="kibana_url", default="http://localhost:5601",
                        help="Kibana URL (http://localhost:5601 by default)")


    return parser


def get_params():
    parser = get_params_parser_create_dash()
    args = parser.parse_args()

    if not (args.export_file or args.import_file or args.list):
        parser.error("--export or --import or --list needed")
    else:
        if args.export_file and not args.dashboard:
            parser.error("--export needs --dashboard")
    return args


if __name__ == '__main__':

    ARGS = get_params()

    config_logging(ARGS.debug)

    try:
        if ARGS.import_file:
            import_dashboard(ARGS.elastic_url, ARGS.kibana_url, ARGS.import_file, ARGS.kibana_index,
                             ARGS.data_sources, ARGS.add_vis_studies, ARGS.strict)
        elif ARGS.export_file:
            if ARGS.dashboard:
                export_dashboard(ARGS.elastic_url, ARGS.dashboard, ARGS.export_file,
                                 ARGS.kibana_index, ARGS.split_index_patterns)
        elif ARGS.list:
            list_dashboards(ARGS.elastic_url, ARGS.kibana_index)

    except HTTPError as http_error:
        res = http_error.response
        error_msg = u'%s. Content: %s' % (http_error, res.content)
        logging.error(error_msg)

    except ValueError as value_error:
        logging.error(value_error)

    except RuntimeError as runtime_error:
        logging.error(runtime_error)
